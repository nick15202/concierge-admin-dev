/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as algoliasearchProxy from 'algoliasearch/index';
import * as encodeProxy from 'querystring-es3/encode';
import { VERSION as AngularVersion } from '@angular/core';
import { VERSION } from './version';
// AOT + Rollup workaround
// https://github.com/rollup/rollup/issues/1267#issuecomment-296395734
/** @type {?} */
const algoliasearch = algoliasearchProxy.default || algoliasearchProxy;
/** @type {?} */
const encode = encodeProxy.default || encodeProxy;
/**
 * @param {?} __0
 * @return {?}
 */
export function createSSRAlgoliaClient({ httpClient, HttpHeaders, transferState, makeStateKey, options = {}, }) {
    console.warn('`createSSRAlgoliaClient` is deprecated in favor of `createSSRSearchClient` to be plugged to `searchClient`.');
    return (/**
     * @param {?} _
     * @param {?} appId
     * @param {?} apiKey
     * @return {?}
     */
    (_, appId, apiKey) => createSSRSearchClient({
        appId,
        apiKey,
        httpClient,
        HttpHeaders,
        transferState,
        makeStateKey,
        options,
    }));
}
/**
 * @param {?} __0
 * @return {?}
 */
export function createSSRSearchClient({ appId, apiKey, httpClient, HttpHeaders, transferState, makeStateKey, options = {}, }) {
    /** @type {?} */
    const client = algoliasearch(appId, apiKey, options);
    client.addAlgoliaAgent(`angular (${AngularVersion.full})`);
    client.addAlgoliaAgent(`angular-instantsearch (${VERSION})`);
    client.addAlgoliaAgent(`angular-instantsearch-server (${VERSION})`);
    client._request = (/**
     * @param {?} rawUrl
     * @param {?} opts
     * @return {?}
     */
    (rawUrl, opts) => {
        /** @type {?} */
        let headers = new HttpHeaders();
        headers = headers.set('content-type', opts.method === 'POST'
            ? 'application/x-www-form-urlencoded'
            : 'application/json');
        headers = headers.set('accept', 'application/json');
        /** @type {?} */
        const url = rawUrl + (rawUrl.includes('?') ? '&' : '?') + encode(opts.headers);
        /** @type {?} */
        const transferStateKey = makeStateKey(`ngais(${opts.body})`);
        if (transferState.hasKey(transferStateKey)) {
            /** @type {?} */
            const resp = JSON.parse(transferState.get(transferStateKey, {}));
            return Promise.resolve({
                statusCode: resp.status,
                body: resp.body,
                headers: resp.headers,
            });
        }
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            httpClient
                .request(opts.method, url, {
                headers,
                body: opts.body,
                observe: 'response',
            })
                .subscribe((/**
             * @param {?} resp
             * @return {?}
             */
            resp => {
                transferState.set(transferStateKey, JSON.stringify(resp));
                resolve({
                    statusCode: resp.status,
                    body: resp.body,
                    headers: resp.headers,
                });
            }), (/**
             * @param {?} resp
             * @return {?}
             */
            resp => reject({
                statusCode: resp.status,
                body: resp.body,
                headers: resp.headers,
            })));
        }));
    });
    return client;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXNzci1hbGdvbGlhLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbImNyZWF0ZS1zc3ItYWxnb2xpYS1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sS0FBSyxrQkFBa0IsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRCxPQUFPLEtBQUssV0FBVyxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLElBQUksY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7Ozs7TUFLOUIsYUFBYSxHQUFHLGtCQUFrQixDQUFDLE9BQU8sSUFBSSxrQkFBa0I7O01BQ2hFLE1BQU0sR0FBRyxXQUFXLENBQUMsT0FBTyxJQUFJLFdBQVc7Ozs7O0FBRWpELE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxFQUNyQyxVQUFVLEVBQ1YsV0FBVyxFQUNYLGFBQWEsRUFDYixZQUFZLEVBQ1osT0FBTyxHQUFHLEVBQUUsR0FDYjtJQUNDLE9BQU8sQ0FBQyxJQUFJLENBQ1YsNkdBQTZHLENBQzlHLENBQUM7SUFFRjs7Ozs7O0lBQU8sQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQzFCLHFCQUFxQixDQUFDO1FBQ3BCLEtBQUs7UUFDTCxNQUFNO1FBQ04sVUFBVTtRQUNWLFdBQVc7UUFDWCxhQUFhO1FBQ2IsWUFBWTtRQUNaLE9BQU87S0FDUixDQUFDLEVBQUM7QUFDUCxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxFQUNwQyxLQUFLLEVBQ0wsTUFBTSxFQUNOLFVBQVUsRUFDVixXQUFXLEVBQ1gsYUFBYSxFQUNiLFlBQVksRUFDWixPQUFPLEdBQUcsRUFBRSxHQUNiOztVQUNPLE1BQU0sR0FBRyxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUM7SUFDcEQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxZQUFZLGNBQWMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQzNELE1BQU0sQ0FBQyxlQUFlLENBQUMsMEJBQTBCLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDN0QsTUFBTSxDQUFDLGVBQWUsQ0FBQyxpQ0FBaUMsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUVwRSxNQUFNLENBQUMsUUFBUTs7Ozs7SUFBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRTs7WUFDN0IsT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFO1FBRS9CLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUNuQixjQUFjLEVBQ2QsSUFBSSxDQUFDLE1BQU0sS0FBSyxNQUFNO1lBQ3BCLENBQUMsQ0FBQyxtQ0FBbUM7WUFDckMsQ0FBQyxDQUFDLGtCQUFrQixDQUN2QixDQUFDO1FBRUYsT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLGtCQUFrQixDQUFDLENBQUM7O2NBRTlDLEdBQUcsR0FDUCxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDOztjQUU5RCxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUM7UUFFNUQsSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7O2tCQUNwQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2hFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQztnQkFDckIsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNO2dCQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2FBQ3RCLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxJQUFJLE9BQU87Ozs7O1FBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsVUFBVTtpQkFDUCxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7Z0JBQ3pCLE9BQU87Z0JBQ1AsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLE9BQU8sRUFBRSxVQUFVO2FBQ3BCLENBQUM7aUJBQ0QsU0FBUzs7OztZQUNSLElBQUksQ0FBQyxFQUFFO2dCQUNMLGFBQWEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUMxRCxPQUFPLENBQUM7b0JBQ04sVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNO29CQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7b0JBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2lCQUN0QixDQUFDLENBQUM7WUFDTCxDQUFDOzs7O1lBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FDTCxNQUFNLENBQUM7Z0JBQ0wsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNO2dCQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2FBQ3RCLENBQUMsRUFDTCxDQUFDO1FBQ04sQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDLENBQUEsQ0FBQztJQUVGLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhbGdvbGlhc2VhcmNoUHJveHkgZnJvbSAnYWxnb2xpYXNlYXJjaC9pbmRleCc7XG5pbXBvcnQgKiBhcyBlbmNvZGVQcm94eSBmcm9tICdxdWVyeXN0cmluZy1lczMvZW5jb2RlJztcbmltcG9ydCB7IFZFUlNJT04gYXMgQW5ndWxhclZlcnNpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZFUlNJT04gfSBmcm9tICcuL3ZlcnNpb24nO1xuXG4vLyBBT1QgKyBSb2xsdXAgd29ya2Fyb3VuZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvaXNzdWVzLzEyNjcjaXNzdWVjb21tZW50LTI5NjM5NTczNFxuXG5jb25zdCBhbGdvbGlhc2VhcmNoID0gYWxnb2xpYXNlYXJjaFByb3h5LmRlZmF1bHQgfHwgYWxnb2xpYXNlYXJjaFByb3h5O1xuY29uc3QgZW5jb2RlID0gZW5jb2RlUHJveHkuZGVmYXVsdCB8fCBlbmNvZGVQcm94eTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNTUkFsZ29saWFDbGllbnQoe1xuICBodHRwQ2xpZW50LFxuICBIdHRwSGVhZGVycyxcbiAgdHJhbnNmZXJTdGF0ZSxcbiAgbWFrZVN0YXRlS2V5LFxuICBvcHRpb25zID0ge30sXG59KSB7XG4gIGNvbnNvbGUud2FybihcbiAgICAnYGNyZWF0ZVNTUkFsZ29saWFDbGllbnRgIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgYGNyZWF0ZVNTUlNlYXJjaENsaWVudGAgdG8gYmUgcGx1Z2dlZCB0byBgc2VhcmNoQ2xpZW50YC4nXG4gICk7XG5cbiAgcmV0dXJuIChfLCBhcHBJZCwgYXBpS2V5KSA9PlxuICAgIGNyZWF0ZVNTUlNlYXJjaENsaWVudCh7XG4gICAgICBhcHBJZCxcbiAgICAgIGFwaUtleSxcbiAgICAgIGh0dHBDbGllbnQsXG4gICAgICBIdHRwSGVhZGVycyxcbiAgICAgIHRyYW5zZmVyU3RhdGUsXG4gICAgICBtYWtlU3RhdGVLZXksXG4gICAgICBvcHRpb25zLFxuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU1NSU2VhcmNoQ2xpZW50KHtcbiAgYXBwSWQsXG4gIGFwaUtleSxcbiAgaHR0cENsaWVudCxcbiAgSHR0cEhlYWRlcnMsXG4gIHRyYW5zZmVyU3RhdGUsXG4gIG1ha2VTdGF0ZUtleSxcbiAgb3B0aW9ucyA9IHt9LFxufSkge1xuICBjb25zdCBjbGllbnQgPSBhbGdvbGlhc2VhcmNoKGFwcElkLCBhcGlLZXksIG9wdGlvbnMpO1xuICBjbGllbnQuYWRkQWxnb2xpYUFnZW50KGBhbmd1bGFyICgke0FuZ3VsYXJWZXJzaW9uLmZ1bGx9KWApO1xuICBjbGllbnQuYWRkQWxnb2xpYUFnZW50KGBhbmd1bGFyLWluc3RhbnRzZWFyY2ggKCR7VkVSU0lPTn0pYCk7XG4gIGNsaWVudC5hZGRBbGdvbGlhQWdlbnQoYGFuZ3VsYXItaW5zdGFudHNlYXJjaC1zZXJ2ZXIgKCR7VkVSU0lPTn0pYCk7XG5cbiAgY2xpZW50Ll9yZXF1ZXN0ID0gKHJhd1VybCwgb3B0cykgPT4ge1xuICAgIGxldCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XG5cbiAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoXG4gICAgICAnY29udGVudC10eXBlJyxcbiAgICAgIG9wdHMubWV0aG9kID09PSAnUE9TVCdcbiAgICAgICAgPyAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xuICAgICAgICA6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICk7XG5cbiAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ2FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cbiAgICBjb25zdCB1cmwgPVxuICAgICAgcmF3VXJsICsgKHJhd1VybC5pbmNsdWRlcygnPycpID8gJyYnIDogJz8nKSArIGVuY29kZShvcHRzLmhlYWRlcnMpO1xuXG4gICAgY29uc3QgdHJhbnNmZXJTdGF0ZUtleSA9IG1ha2VTdGF0ZUtleShgbmdhaXMoJHtvcHRzLmJvZHl9KWApO1xuXG4gICAgaWYgKHRyYW5zZmVyU3RhdGUuaGFzS2V5KHRyYW5zZmVyU3RhdGVLZXkpKSB7XG4gICAgICBjb25zdCByZXNwID0gSlNPTi5wYXJzZSh0cmFuc2ZlclN0YXRlLmdldCh0cmFuc2ZlclN0YXRlS2V5LCB7fSkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIHN0YXR1c0NvZGU6IHJlc3Auc3RhdHVzLFxuICAgICAgICBib2R5OiByZXNwLmJvZHksXG4gICAgICAgIGhlYWRlcnM6IHJlc3AuaGVhZGVycyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBodHRwQ2xpZW50XG4gICAgICAgIC5yZXF1ZXN0KG9wdHMubWV0aG9kLCB1cmwsIHtcbiAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgIGJvZHk6IG9wdHMuYm9keSxcbiAgICAgICAgICBvYnNlcnZlOiAncmVzcG9uc2UnLFxuICAgICAgICB9KVxuICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgIHJlc3AgPT4ge1xuICAgICAgICAgICAgdHJhbnNmZXJTdGF0ZS5zZXQodHJhbnNmZXJTdGF0ZUtleSwgSlNPTi5zdHJpbmdpZnkocmVzcCkpO1xuICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgIHN0YXR1c0NvZGU6IHJlc3Auc3RhdHVzLFxuICAgICAgICAgICAgICBib2R5OiByZXNwLmJvZHksXG4gICAgICAgICAgICAgIGhlYWRlcnM6IHJlc3AuaGVhZGVycyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVzcCA9PlxuICAgICAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzcC5zdGF0dXMsXG4gICAgICAgICAgICAgIGJvZHk6IHJlc3AuYm9keSxcbiAgICAgICAgICAgICAgaGVhZGVyczogcmVzcC5oZWFkZXJzLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gY2xpZW50O1xufVxuIl19