/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, Input, TemplateRef, Inject, forwardRef, } from '@angular/core';
import { connectInfiniteHits } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { noop } from '../utils';
export class NgAisInfiniteHits extends BaseWidget {
    /**
     * @param {?} instantSearchParent
     */
    constructor(instantSearchParent) {
        super('InfiniteHits');
        this.instantSearchParent = instantSearchParent;
        // render options
        this.showMoreLabel = 'Show more results';
        // inner widget state returned from connector
        this.state = {
            hits: [],
            isLastPage: false,
            showMore: noop,
            results: {},
        };
        this.updateState = (/**
         * @param {?} state
         * @param {?} isFirstRendering
         * @return {?}
         */
        (state, isFirstRendering) => {
            if (isFirstRendering)
                return;
            this.state = Object.assign({}, state, { results: state.results, hits: typeof this.transformItems === 'function'
                    ? this.transformItems(state.hits)
                    : state.hits });
        });
        this.createWidget(connectInfiniteHits, { escapeHits: true });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    showMore(event) {
        event.preventDefault();
        this.state.showMore();
    }
}
NgAisInfiniteHits.decorators = [
    { type: Component, args: [{
                selector: 'ais-infinite-hits',
                template: `
    <div [class]="cx()">
      <ng-container *ngTemplateOutlet="template; context: state"></ng-container>

      <!-- default rendering if no template specified -->
      <div *ngIf="!template">
        <ul [class]="cx('list')">
          <li
            [class]="cx('item')"
            *ngFor="let hit of state.hits"
          >
            <ais-highlight attribute="name" [hit]="hit">
            </ais-highlight>
          </li>
        </ul>
      </div>

      <button
        [class]="cx('showMore')"
        (click)="showMore($event)"
        [disabled]="state.isLastPage"
        *ngIf="!template"
      >
        {{showMoreLabel}}
      </button>
    </div>
  `,
            },] },
];
/** @nocollapse */
NgAisInfiniteHits.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => NgAisInstantSearch)),] }] }
];
NgAisInfiniteHits.propDecorators = {
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    showMoreLabel: [{ type: Input }],
    transformItems: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgAisInfiniteHits.prototype.template;
    /** @type {?} */
    NgAisInfiniteHits.prototype.showMoreLabel;
    /** @type {?} */
    NgAisInfiniteHits.prototype.transformItems;
    /** @type {?} */
    NgAisInfiniteHits.prototype.state;
    /** @type {?} */
    NgAisInfiniteHits.prototype.updateState;
    /** @type {?} */
    NgAisInfiniteHits.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5maW5pdGUtaGl0cy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbImluZmluaXRlLWhpdHMvaW5maW5pdGUtaGl0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUNMLFdBQVcsRUFDWCxNQUFNLEVBQ04sVUFBVSxHQUNYLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBZ0NoQyxNQUFNLE9BQU8saUJBQWtCLFNBQVEsVUFBVTs7OztJQW9CL0MsWUFFUyxtQkFBd0I7UUFFL0IsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRmYsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFLOztRQWxCakIsa0JBQWEsR0FBVyxtQkFBbUIsQ0FBQzs7UUFJckQsVUFBSyxHQUtSO1lBQ0YsSUFBSSxFQUFFLEVBQUU7WUFDUixVQUFVLEVBQUUsS0FBSztZQUNqQixRQUFRLEVBQUUsSUFBSTtZQUNkLE9BQU8sRUFBRSxFQUFFO1NBQ1osQ0FBQztRQWVGLGdCQUFXOzs7OztRQUFHLENBQUMsS0FBSyxFQUFFLGdCQUF5QixFQUFFLEVBQUU7WUFDakQsSUFBSSxnQkFBZ0I7Z0JBQUUsT0FBTztZQUU3QixJQUFJLENBQUMsS0FBSyxxQkFDTCxLQUFLLElBQ1IsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQ3RCLElBQUksRUFDRixPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssVUFBVTtvQkFDdkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztvQkFDakMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQ2pCLENBQUM7UUFDSixDQUFDLEVBQUM7UUFuQkEsSUFBSSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELENBQUM7Ozs7O0lBRU0sUUFBUSxDQUFDLEtBQWlCO1FBQy9CLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hCLENBQUM7OztZQTdERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTBCVDthQUNGOzs7OzRDQXNCSSxNQUFNLFNBQUMsVUFBVTs7O29CQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixFQUFDOzs7dUJBcEI3QyxZQUFZLFNBQUMsV0FBVzs0QkFHeEIsS0FBSzs2QkFDTCxLQUFLOzs7O0lBSk4scUNBQWlEOztJQUdqRCwwQ0FBNEQ7O0lBQzVELDJDQUEwQzs7SUFHMUMsa0NBVUU7O0lBZUYsd0NBV0U7O0lBdkJBLGdEQUMrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkLFxuICBJbnB1dCxcbiAgVGVtcGxhdGVSZWYsXG4gIEluamVjdCxcbiAgZm9yd2FyZFJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbm5lY3RJbmZpbml0ZUhpdHMgfSBmcm9tICdpbnN0YW50c2VhcmNoLmpzL2VzL2Nvbm5lY3RvcnMnO1xuaW1wb3J0IHsgQmFzZVdpZGdldCB9IGZyb20gJy4uL2Jhc2Utd2lkZ2V0JztcbmltcG9ydCB7IE5nQWlzSW5zdGFudFNlYXJjaCB9IGZyb20gJy4uL2luc3RhbnRzZWFyY2gvaW5zdGFudHNlYXJjaCc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhaXMtaW5maW5pdGUtaGl0cycsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBbY2xhc3NdPVwiY3goKVwiPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cInRlbXBsYXRlOyBjb250ZXh0OiBzdGF0ZVwiPjwvbmctY29udGFpbmVyPlxuXG4gICAgICA8IS0tIGRlZmF1bHQgcmVuZGVyaW5nIGlmIG5vIHRlbXBsYXRlIHNwZWNpZmllZCAtLT5cbiAgICAgIDxkaXYgKm5nSWY9XCIhdGVtcGxhdGVcIj5cbiAgICAgICAgPHVsIFtjbGFzc109XCJjeCgnbGlzdCcpXCI+XG4gICAgICAgICAgPGxpXG4gICAgICAgICAgICBbY2xhc3NdPVwiY3goJ2l0ZW0nKVwiXG4gICAgICAgICAgICAqbmdGb3I9XCJsZXQgaGl0IG9mIHN0YXRlLmhpdHNcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxhaXMtaGlnaGxpZ2h0IGF0dHJpYnV0ZT1cIm5hbWVcIiBbaGl0XT1cImhpdFwiPlxuICAgICAgICAgICAgPC9haXMtaGlnaGxpZ2h0PlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGJ1dHRvblxuICAgICAgICBbY2xhc3NdPVwiY3goJ3Nob3dNb3JlJylcIlxuICAgICAgICAoY2xpY2spPVwic2hvd01vcmUoJGV2ZW50KVwiXG4gICAgICAgIFtkaXNhYmxlZF09XCJzdGF0ZS5pc0xhc3RQYWdlXCJcbiAgICAgICAgKm5nSWY9XCIhdGVtcGxhdGVcIlxuICAgICAgPlxuICAgICAgICB7e3Nob3dNb3JlTGFiZWx9fVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzSW5maW5pdGVIaXRzIGV4dGVuZHMgQmFzZVdpZGdldCB7XG4gIEBDb250ZW50Q2hpbGQoVGVtcGxhdGVSZWYpIHB1YmxpYyB0ZW1wbGF0ZT86IGFueTtcblxuICAvLyByZW5kZXIgb3B0aW9uc1xuICBASW5wdXQoKSBwdWJsaWMgc2hvd01vcmVMYWJlbDogc3RyaW5nID0gJ1Nob3cgbW9yZSByZXN1bHRzJztcbiAgQElucHV0KCkgcHVibGljIHRyYW5zZm9ybUl0ZW1zPzogRnVuY3Rpb247XG5cbiAgLy8gaW5uZXIgd2lkZ2V0IHN0YXRlIHJldHVybmVkIGZyb20gY29ubmVjdG9yXG4gIHB1YmxpYyBzdGF0ZToge1xuICAgIGhpdHM6IHt9W107XG4gICAgaXNMYXN0UGFnZTogYm9vbGVhbjtcbiAgICBzaG93TW9yZTogRnVuY3Rpb247XG4gICAgcmVzdWx0czoge307XG4gIH0gPSB7XG4gICAgaGl0czogW10sXG4gICAgaXNMYXN0UGFnZTogZmFsc2UsXG4gICAgc2hvd01vcmU6IG5vb3AsXG4gICAgcmVzdWx0czoge30sXG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5zdGFudFNlYXJjaCkpXG4gICAgcHVibGljIGluc3RhbnRTZWFyY2hQYXJlbnQ6IGFueVxuICApIHtcbiAgICBzdXBlcignSW5maW5pdGVIaXRzJyk7XG4gICAgdGhpcy5jcmVhdGVXaWRnZXQoY29ubmVjdEluZmluaXRlSGl0cywgeyBlc2NhcGVIaXRzOiB0cnVlIH0pO1xuICB9XG5cbiAgcHVibGljIHNob3dNb3JlKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnN0YXRlLnNob3dNb3JlKCk7XG4gIH1cblxuICB1cGRhdGVTdGF0ZSA9IChzdGF0ZSwgaXNGaXJzdFJlbmRlcmluZzogYm9vbGVhbikgPT4ge1xuICAgIGlmIChpc0ZpcnN0UmVuZGVyaW5nKSByZXR1cm47XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgLi4uc3RhdGUsXG4gICAgICByZXN1bHRzOiBzdGF0ZS5yZXN1bHRzLFxuICAgICAgaGl0czpcbiAgICAgICAgdHlwZW9mIHRoaXMudHJhbnNmb3JtSXRlbXMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICA/IHRoaXMudHJhbnNmb3JtSXRlbXMoc3RhdGUuaGl0cylcbiAgICAgICAgICA6IHN0YXRlLmhpdHMsXG4gICAgfTtcbiAgfTtcbn1cbiJdfQ==