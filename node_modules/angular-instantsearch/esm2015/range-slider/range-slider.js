/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, Inject, forwardRef } from '@angular/core';
import { connectRange } from 'instantsearch.js/es/connectors';
import * as noUiSlider from 'nouislider';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { parseNumberInput, noop } from '../utils';
export class NgAisRangeSlider extends BaseWidget {
    /**
     * @param {?} instantSearchParent
     */
    constructor(instantSearchParent) {
        super('RangeSlider');
        this.instantSearchParent = instantSearchParent;
        // render options
        this.pips = true;
        this.tooltips = true;
        this.precision = 2;
        this.state = {
            range: { min: 0, max: 1 },
            refine: noop,
            start: [0, 1],
        };
        this.updateState = (/**
         * @param {?} state
         * @param {?} isFirstRendering
         * @return {?}
         */
        (state, isFirstRendering) => {
            if (isFirstRendering) {
                // create slider
                /** @type {?} */
                const config = {
                    animate: false,
                    behaviour: 'snap',
                    connect: true,
                    range: { min: 0, max: 1 },
                    start: [0, 1],
                    step: this.step,
                    tooltips: this.tooltips && [
                        { to: this.formatTooltip },
                        { to: this.formatTooltip },
                    ],
                };
                if (this.pips === true || typeof this.pips === 'undefined') {
                    Object.assign(config, {
                        pips: {
                            density: 3,
                            mode: 'positions',
                            stepped: true,
                            values: [0, 50, 100],
                        },
                    });
                }
                else if (this.pips !== undefined) {
                    Object.assign(config, { pips: this.pips });
                }
                this.slider = noUiSlider.create(this.sliderContainer.nativeElement, config);
                // register listen events
                this.sliderContainer.nativeElement.noUiSlider.on('change', this.handleChange);
            }
            // update component inner state
            this.state = state;
            // update the slider state
            const { range: { min, max }, start, } = state;
            /** @type {?} */
            const disabled = min === max;
            /** @type {?} */
            const range = disabled ? { min, max: max + 0.0001 } : { min, max };
            this.slider.updateOptions({ disabled, range, start });
        });
        this.handleChange = (/**
         * @param {?} values
         * @return {?}
         */
        (values) => {
            this.state.refine(values);
        });
        this.formatTooltip = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            return value.toFixed(parseNumberInput(this.precision));
        });
    }
    /**
     * @return {?}
     */
    get step() {
        // compute step from the precision value
        /** @type {?} */
        const precision = parseNumberInput(this.precision) || 2;
        return 1 / Math.pow(10, precision);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createWidget(connectRange, {
            attributeName: this.attribute,
            max: parseNumberInput(this.max),
            min: parseNumberInput(this.min),
            precision: parseNumberInput(this.precision),
        });
        super.ngOnInit();
    }
}
NgAisRangeSlider.decorators = [
    { type: Component, args: [{
                selector: 'ais-range-slider',
                template: `
    <div [class]="cx()">
      <div [class]="cx('body')">
        <div #sliderContainer></div>
      </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
NgAisRangeSlider.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => NgAisInstantSearch)),] }] }
];
NgAisRangeSlider.propDecorators = {
    sliderContainer: [{ type: ViewChild, args: ['sliderContainer',] }],
    pips: [{ type: Input }],
    tooltips: [{ type: Input }],
    attribute: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    precision: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgAisRangeSlider.prototype.sliderContainer;
    /** @type {?} */
    NgAisRangeSlider.prototype.pips;
    /** @type {?} */
    NgAisRangeSlider.prototype.tooltips;
    /** @type {?} */
    NgAisRangeSlider.prototype.attribute;
    /** @type {?} */
    NgAisRangeSlider.prototype.min;
    /** @type {?} */
    NgAisRangeSlider.prototype.max;
    /** @type {?} */
    NgAisRangeSlider.prototype.precision;
    /** @type {?} */
    NgAisRangeSlider.prototype.state;
    /**
     * @type {?}
     * @private
     */
    NgAisRangeSlider.prototype.slider;
    /** @type {?} */
    NgAisRangeSlider.prototype.updateState;
    /** @type {?} */
    NgAisRangeSlider.prototype.handleChange;
    /** @type {?} */
    NgAisRangeSlider.prototype.formatTooltip;
    /** @type {?} */
    NgAisRangeSlider.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,