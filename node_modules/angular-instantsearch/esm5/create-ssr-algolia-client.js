/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as algoliasearchProxy from 'algoliasearch/index';
import * as encodeProxy from 'querystring-es3/encode';
import { VERSION as AngularVersion } from '@angular/core';
import { VERSION } from './version';
// AOT + Rollup workaround
// https://github.com/rollup/rollup/issues/1267#issuecomment-296395734
/** @type {?} */
var algoliasearch = algoliasearchProxy.default || algoliasearchProxy;
/** @type {?} */
var encode = encodeProxy.default || encodeProxy;
/**
 * @param {?} __0
 * @return {?}
 */
export function createSSRAlgoliaClient(_a) {
    var httpClient = _a.httpClient, HttpHeaders = _a.HttpHeaders, transferState = _a.transferState, makeStateKey = _a.makeStateKey, _b = _a.options, options = _b === void 0 ? {} : _b;
    console.warn('`createSSRAlgoliaClient` is deprecated in favor of `createSSRSearchClient` to be plugged to `searchClient`.');
    return (/**
     * @param {?} _
     * @param {?} appId
     * @param {?} apiKey
     * @return {?}
     */
    function (_, appId, apiKey) {
        return createSSRSearchClient({
            appId: appId,
            apiKey: apiKey,
            httpClient: httpClient,
            HttpHeaders: HttpHeaders,
            transferState: transferState,
            makeStateKey: makeStateKey,
            options: options,
        });
    });
}
/**
 * @param {?} __0
 * @return {?}
 */
export function createSSRSearchClient(_a) {
    var appId = _a.appId, apiKey = _a.apiKey, httpClient = _a.httpClient, HttpHeaders = _a.HttpHeaders, transferState = _a.transferState, makeStateKey = _a.makeStateKey, _b = _a.options, options = _b === void 0 ? {} : _b;
    /** @type {?} */
    var client = algoliasearch(appId, apiKey, options);
    client.addAlgoliaAgent("angular (" + AngularVersion.full + ")");
    client.addAlgoliaAgent("angular-instantsearch (" + VERSION + ")");
    client.addAlgoliaAgent("angular-instantsearch-server (" + VERSION + ")");
    client._request = (/**
     * @param {?} rawUrl
     * @param {?} opts
     * @return {?}
     */
    function (rawUrl, opts) {
        /** @type {?} */
        var headers = new HttpHeaders();
        headers = headers.set('content-type', opts.method === 'POST'
            ? 'application/x-www-form-urlencoded'
            : 'application/json');
        headers = headers.set('accept', 'application/json');
        /** @type {?} */
        var url = rawUrl + (rawUrl.includes('?') ? '&' : '?') + encode(opts.headers);
        /** @type {?} */
        var transferStateKey = makeStateKey("ngais(" + opts.body + ")");
        if (transferState.hasKey(transferStateKey)) {
            /** @type {?} */
            var resp = JSON.parse(transferState.get(transferStateKey, {}));
            return Promise.resolve({
                statusCode: resp.status,
                body: resp.body,
                headers: resp.headers,
            });
        }
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            httpClient
                .request(opts.method, url, {
                headers: headers,
                body: opts.body,
                observe: 'response',
            })
                .subscribe((/**
             * @param {?} resp
             * @return {?}
             */
            function (resp) {
                transferState.set(transferStateKey, JSON.stringify(resp));
                resolve({
                    statusCode: resp.status,
                    body: resp.body,
                    headers: resp.headers,
                });
            }), (/**
             * @param {?} resp
             * @return {?}
             */
            function (resp) {
                return reject({
                    statusCode: resp.status,
                    body: resp.body,
                    headers: resp.headers,
                });
            }));
        }));
    });
    return client;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXNzci1hbGdvbGlhLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbImNyZWF0ZS1zc3ItYWxnb2xpYS1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sS0FBSyxrQkFBa0IsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRCxPQUFPLEtBQUssV0FBVyxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLElBQUksY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7Ozs7SUFLOUIsYUFBYSxHQUFHLGtCQUFrQixDQUFDLE9BQU8sSUFBSSxrQkFBa0I7O0lBQ2hFLE1BQU0sR0FBRyxXQUFXLENBQUMsT0FBTyxJQUFJLFdBQVc7Ozs7O0FBRWpELE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxFQU10QztRQUxDLDBCQUFVLEVBQ1YsNEJBQVcsRUFDWCxnQ0FBYSxFQUNiLDhCQUFZLEVBQ1osZUFBWSxFQUFaLGlDQUFZO0lBRVosT0FBTyxDQUFDLElBQUksQ0FDViw2R0FBNkcsQ0FDOUcsQ0FBQztJQUVGOzs7Ozs7SUFBTyxVQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTTtRQUN0QixPQUFBLHFCQUFxQixDQUFDO1lBQ3BCLEtBQUssT0FBQTtZQUNMLE1BQU0sUUFBQTtZQUNOLFVBQVUsWUFBQTtZQUNWLFdBQVcsYUFBQTtZQUNYLGFBQWEsZUFBQTtZQUNiLFlBQVksY0FBQTtZQUNaLE9BQU8sU0FBQTtTQUNSLENBQUM7SUFSRixDQVFFLEVBQUM7QUFDUCxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxFQVFyQztRQVBDLGdCQUFLLEVBQ0wsa0JBQU0sRUFDTiwwQkFBVSxFQUNWLDRCQUFXLEVBQ1gsZ0NBQWEsRUFDYiw4QkFBWSxFQUNaLGVBQVksRUFBWixpQ0FBWTs7UUFFTixNQUFNLEdBQUcsYUFBYSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDO0lBQ3BELE1BQU0sQ0FBQyxlQUFlLENBQUMsY0FBWSxjQUFjLENBQUMsSUFBSSxNQUFHLENBQUMsQ0FBQztJQUMzRCxNQUFNLENBQUMsZUFBZSxDQUFDLDRCQUEwQixPQUFPLE1BQUcsQ0FBQyxDQUFDO0lBQzdELE1BQU0sQ0FBQyxlQUFlLENBQUMsbUNBQWlDLE9BQU8sTUFBRyxDQUFDLENBQUM7SUFFcEUsTUFBTSxDQUFDLFFBQVE7Ozs7O0lBQUcsVUFBQyxNQUFNLEVBQUUsSUFBSTs7WUFDekIsT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFO1FBRS9CLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUNuQixjQUFjLEVBQ2QsSUFBSSxDQUFDLE1BQU0sS0FBSyxNQUFNO1lBQ3BCLENBQUMsQ0FBQyxtQ0FBbUM7WUFDckMsQ0FBQyxDQUFDLGtCQUFrQixDQUN2QixDQUFDO1FBRUYsT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLGtCQUFrQixDQUFDLENBQUM7O1lBRTlDLEdBQUcsR0FDUCxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDOztZQUU5RCxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsV0FBUyxJQUFJLENBQUMsSUFBSSxNQUFHLENBQUM7UUFFNUQsSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7O2dCQUNwQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2hFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQztnQkFDckIsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNO2dCQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2FBQ3RCLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxJQUFJLE9BQU87Ozs7O1FBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtZQUNqQyxVQUFVO2lCQUNQLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtnQkFDekIsT0FBTyxTQUFBO2dCQUNQLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZixPQUFPLEVBQUUsVUFBVTthQUNwQixDQUFDO2lCQUNELFNBQVM7Ozs7WUFDUixVQUFBLElBQUk7Z0JBQ0YsYUFBYSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzFELE9BQU8sQ0FBQztvQkFDTixVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU07b0JBQ3ZCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtvQkFDZixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87aUJBQ3RCLENBQUMsQ0FBQztZQUNMLENBQUM7Ozs7WUFDRCxVQUFBLElBQUk7Z0JBQ0YsT0FBQSxNQUFNLENBQUM7b0JBQ0wsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNO29CQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7b0JBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2lCQUN0QixDQUFDO1lBSkYsQ0FJRSxFQUNMLENBQUM7UUFDTixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQSxDQUFDO0lBRUYsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFsZ29saWFzZWFyY2hQcm94eSBmcm9tICdhbGdvbGlhc2VhcmNoL2luZGV4JztcbmltcG9ydCAqIGFzIGVuY29kZVByb3h5IGZyb20gJ3F1ZXJ5c3RyaW5nLWVzMy9lbmNvZGUnO1xuaW1wb3J0IHsgVkVSU0lPTiBhcyBBbmd1bGFyVmVyc2lvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVkVSU0lPTiB9IGZyb20gJy4vdmVyc2lvbic7XG5cbi8vIEFPVCArIFJvbGx1cCB3b3JrYXJvdW5kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL3JvbGx1cC9pc3N1ZXMvMTI2NyNpc3N1ZWNvbW1lbnQtMjk2Mzk1NzM0XG5cbmNvbnN0IGFsZ29saWFzZWFyY2ggPSBhbGdvbGlhc2VhcmNoUHJveHkuZGVmYXVsdCB8fCBhbGdvbGlhc2VhcmNoUHJveHk7XG5jb25zdCBlbmNvZGUgPSBlbmNvZGVQcm94eS5kZWZhdWx0IHx8IGVuY29kZVByb3h5O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU1NSQWxnb2xpYUNsaWVudCh7XG4gIGh0dHBDbGllbnQsXG4gIEh0dHBIZWFkZXJzLFxuICB0cmFuc2ZlclN0YXRlLFxuICBtYWtlU3RhdGVLZXksXG4gIG9wdGlvbnMgPSB7fSxcbn0pIHtcbiAgY29uc29sZS53YXJuKFxuICAgICdgY3JlYXRlU1NSQWxnb2xpYUNsaWVudGAgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBgY3JlYXRlU1NSU2VhcmNoQ2xpZW50YCB0byBiZSBwbHVnZ2VkIHRvIGBzZWFyY2hDbGllbnRgLidcbiAgKTtcblxuICByZXR1cm4gKF8sIGFwcElkLCBhcGlLZXkpID0+XG4gICAgY3JlYXRlU1NSU2VhcmNoQ2xpZW50KHtcbiAgICAgIGFwcElkLFxuICAgICAgYXBpS2V5LFxuICAgICAgaHR0cENsaWVudCxcbiAgICAgIEh0dHBIZWFkZXJzLFxuICAgICAgdHJhbnNmZXJTdGF0ZSxcbiAgICAgIG1ha2VTdGF0ZUtleSxcbiAgICAgIG9wdGlvbnMsXG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTU1JTZWFyY2hDbGllbnQoe1xuICBhcHBJZCxcbiAgYXBpS2V5LFxuICBodHRwQ2xpZW50LFxuICBIdHRwSGVhZGVycyxcbiAgdHJhbnNmZXJTdGF0ZSxcbiAgbWFrZVN0YXRlS2V5LFxuICBvcHRpb25zID0ge30sXG59KSB7XG4gIGNvbnN0IGNsaWVudCA9IGFsZ29saWFzZWFyY2goYXBwSWQsIGFwaUtleSwgb3B0aW9ucyk7XG4gIGNsaWVudC5hZGRBbGdvbGlhQWdlbnQoYGFuZ3VsYXIgKCR7QW5ndWxhclZlcnNpb24uZnVsbH0pYCk7XG4gIGNsaWVudC5hZGRBbGdvbGlhQWdlbnQoYGFuZ3VsYXItaW5zdGFudHNlYXJjaCAoJHtWRVJTSU9OfSlgKTtcbiAgY2xpZW50LmFkZEFsZ29saWFBZ2VudChgYW5ndWxhci1pbnN0YW50c2VhcmNoLXNlcnZlciAoJHtWRVJTSU9OfSlgKTtcblxuICBjbGllbnQuX3JlcXVlc3QgPSAocmF3VXJsLCBvcHRzKSA9PiB7XG4gICAgbGV0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcblxuICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldChcbiAgICAgICdjb250ZW50LXR5cGUnLFxuICAgICAgb3B0cy5tZXRob2QgPT09ICdQT1NUJ1xuICAgICAgICA/ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICAgICAgIDogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgKTtcblxuICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnYWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcblxuICAgIGNvbnN0IHVybCA9XG4gICAgICByYXdVcmwgKyAocmF3VXJsLmluY2x1ZGVzKCc/JykgPyAnJicgOiAnPycpICsgZW5jb2RlKG9wdHMuaGVhZGVycyk7XG5cbiAgICBjb25zdCB0cmFuc2ZlclN0YXRlS2V5ID0gbWFrZVN0YXRlS2V5KGBuZ2Fpcygke29wdHMuYm9keX0pYCk7XG5cbiAgICBpZiAodHJhbnNmZXJTdGF0ZS5oYXNLZXkodHJhbnNmZXJTdGF0ZUtleSkpIHtcbiAgICAgIGNvbnN0IHJlc3AgPSBKU09OLnBhcnNlKHRyYW5zZmVyU3RhdGUuZ2V0KHRyYW5zZmVyU3RhdGVLZXksIHt9KSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgc3RhdHVzQ29kZTogcmVzcC5zdGF0dXMsXG4gICAgICAgIGJvZHk6IHJlc3AuYm9keSxcbiAgICAgICAgaGVhZGVyczogcmVzcC5oZWFkZXJzLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGh0dHBDbGllbnRcbiAgICAgICAgLnJlcXVlc3Qob3B0cy5tZXRob2QsIHVybCwge1xuICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgYm9keTogb3B0cy5ib2R5LFxuICAgICAgICAgIG9ic2VydmU6ICdyZXNwb25zZScsXG4gICAgICAgIH0pXG4gICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgcmVzcCA9PiB7XG4gICAgICAgICAgICB0cmFuc2ZlclN0YXRlLnNldCh0cmFuc2ZlclN0YXRlS2V5LCBKU09OLnN0cmluZ2lmeShyZXNwKSk7XG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzcC5zdGF0dXMsXG4gICAgICAgICAgICAgIGJvZHk6IHJlc3AuYm9keSxcbiAgICAgICAgICAgICAgaGVhZGVyczogcmVzcC5oZWFkZXJzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXNwID0+XG4gICAgICAgICAgICByZWplY3Qoe1xuICAgICAgICAgICAgICBzdGF0dXNDb2RlOiByZXNwLnN0YXR1cyxcbiAgICAgICAgICAgICAgYm9keTogcmVzcC5ib2R5LFxuICAgICAgICAgICAgICBoZWFkZXJzOiByZXNwLmhlYWRlcnMsXG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBjbGllbnQ7XG59XG4iXX0=