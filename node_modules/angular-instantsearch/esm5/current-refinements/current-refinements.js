/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Inject, forwardRef } from '@angular/core';
import { connectCurrentRefinedValues } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { noop, capitalize } from '../utils';
var NgAisCurrentRefinements = /** @class */ (function (_super) {
    tslib_1.__extends(NgAisCurrentRefinements, _super);
    function NgAisCurrentRefinements(instantSearchParent) {
        var _this = _super.call(this, 'CurrentRefinements') || this;
        _this.instantSearchParent = instantSearchParent;
        // render options
        _this.clearRefinements = 'after';
        _this.clearRefinementsLabel = 'Clear refinements';
        // connector options
        _this.onlyListedAttributes = false;
        _this.clearsQuery = false;
        _this.attributes = [];
        _this.state = {
            attributes: {},
            clearAllClick: noop,
            clearAllURL: noop,
            createURL: noop,
            refine: noop,
            refinements: [],
        };
        return _this;
    }
    Object.defineProperty(NgAisCurrentRefinements.prototype, "isHidden", {
        get: /**
         * @return {?}
         */
        function () {
            return this.state.refinements.length === 0 && this.autoHideContainer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgAisCurrentRefinements.prototype, "refinements", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var items = typeof this.transformItems === 'function'
                ? this.transformItems(this.state.refinements)
                : this.state.refinements;
            // group refinements by category? (attributeName && type)
            return items.reduce((/**
             * @param {?} res
             * @param {?} __1
             * @return {?}
             */
            function (res, _a) {
                var type = _a.type, attributeName = _a.attributeName, refinement = tslib_1.__rest(_a, ["type", "attributeName"]);
                /** @type {?} */
                var match = res.find((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) { return r.attributeName === attributeName && r.type === type; }));
                if (match) {
                    match.items.push(tslib_1.__assign({ type: type, attributeName: attributeName }, refinement));
                }
                else {
                    res.push({
                        type: type,
                        attributeName: attributeName,
                        label: capitalize(attributeName),
                        items: [tslib_1.__assign({ type: type, attributeName: attributeName }, refinement)],
                    });
                }
                return res;
            }), []);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgAisCurrentRefinements.prototype, "json", {
        get: /**
         * @return {?}
         */
        function () {
            return JSON.stringify(this.refinements, null, 4);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgAisCurrentRefinements.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createWidget(connectCurrentRefinedValues, {
            attributes: this.attributes,
            clearsQuery: this.clearsQuery,
            onlyListedAttributes: this.onlyListedAttributes,
        });
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @param {?} event
     * @param {?} refinement
     * @return {?}
     */
    NgAisCurrentRefinements.prototype.handleClick = /**
     * @param {?} event
     * @param {?} refinement
     * @return {?}
     */
    function (event, refinement) {
        event.preventDefault();
        this.state.refine(refinement);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgAisCurrentRefinements.prototype.handleClearAllClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.state.clearAllClick();
    };
    NgAisCurrentRefinements.decorators = [
        { type: Component, args: [{
                    selector: 'ais-current-refinements',
                    template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <button\n        [class]=\"cx('reset')\"\n        (click)=\"handleClearAllClick($event)\"\n        *ngIf=\"clearRefinements === 'before' || clearRefinements === true\">\n        {{clearRefinementsLabel}}\n      </button>\n\n      <ul\n        [class]=\"cx('list')\"\n        *ngFor=\"let refinement of refinements\"\n      >\n        <li [class]=\"cx('item')\">\n          <span [class]=\"cx('label')\">{{refinement.label}}:</span>\n\n          <span\n            [class]=\"cx('category')\"\n            *ngFor=\"let item of refinement.items\"\n          >\n            <span [class]=\"cx('categoryLabel')\">{{item.name}}</span>\n            <button [class]=\"cx('delete')\" (click)=\"handleClick($event, item)\">\u2715</button>\n          </span>\n        </li>\n      </ul>\n\n      <button\n        [class]=\"cx('reset')\"\n        (click)=\"handleClearAllClick($event)\"\n        *ngIf=\"clearRefinements === 'after'\">\n        {{clearRefinementsLabel}}\n      </button>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    NgAisCurrentRefinements.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NgAisInstantSearch; })),] }] }
    ]; };
    NgAisCurrentRefinements.propDecorators = {
        clearRefinements: [{ type: Input }],
        clearRefinementsLabel: [{ type: Input }],
        transformItems: [{ type: Input }],
        onlyListedAttributes: [{ type: Input }],
        clearsQuery: [{ type: Input }],
        attributes: [{ type: Input }]
    };
    return NgAisCurrentRefinements;
}(BaseWidget));
export { NgAisCurrentRefinements };
if (false) {
    /** @type {?} */
    NgAisCurrentRefinements.prototype.clearRefinements;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.clearRefinementsLabel;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.transformItems;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.onlyListedAttributes;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.clearsQuery;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.attributes;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.state;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,